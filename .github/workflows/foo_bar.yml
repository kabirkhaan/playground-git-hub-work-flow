name: 'Foo Bar'

# **What it does**: Renders the content of every page and check all internal links.
# **Why we have it**: To make sure all links connect correctly.
# **Who does it impact**: Docs content.

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:


# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ fromJSON('["ubuntu-latest", "self-hosted"]')[github.repository == 'github/docs-internal'] }}
    outputs:
     apps: ${{ steps.build.outputs.apps }}
    steps:
      - name: Say hello
        run: |
          echo Say Hello
          echo all good üëç
      
      - name: Parse Issues
        id: parse-ref
        uses: actions/github-script@v6
        with:
          script: |
            const query = `query($owner:String!, $name:String!) {
              repository(owner:$owner, name:$name) {
                issues(first: 4, filterBy: {states: OPEN}) {
                  edges {
                    node {
                      title
                    }
                  }
                }
              }
            }`;
            const variables = {
              owner: context.repo.owner,
              name: context.repo.repo
            };
            const result = await github.graphql(query, variables);
            
            const version = "0.1.2";
            core.warning(`Actual [RELEASE] XZY ${version}`);
            core.warning(`Actual [RELEASE] ABC ${version}`);
            
            let existingXYZIssues = result.repository.issues.edges
              .filter(el => el.node.title.includes(`[RELEASE] XZY ${version}`));
            let existingABCReleases = result.repository.issues.edges
              .filter(el => el.node.title.includes(`[RELEASE] ABC ${version}`));
            
            var apps = [];
            if (Array.isArray(existingXYZIssues) && existingXYZIssues.length) { 
              core.warning(`XYZ Release üëç`);
              apps.push("XYZ");
            } 
            if (Array.isArray(existingABCReleases) && existingABCReleases.length) { 
              core.warning(`ABC Release üëç`);
              apps.push("ABC");
            } 
            if (!apps.length) {
                core.warning(`Unknown Release üëé`);
                 apps.push("Unknown");
            }
            core.setOutput('apps', apps);
           
      - name: Upload .xcresult artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: README.md
          path: README.md
          retention-days: 1

      - name: Say hello to the Release ABC
        if: ${{ startsWith(steps.build.outputs.apps, 'ABC') }}
        run: |
          echo Say Hello ABC
          echo all good ABC

      - name: Say hello to the Release XZY
        if: ${{ startsWith(steps.build.outputs.apps, 'XZY') }}
        run: |
          echo Say Hello XYZ
          echo all good XYZ
      
      - name: Say hello to the Release Unknown
        if: ${{ startsWith(steps.build.outputs.apps, 'Unknown') }}
        run: |
          echo Say Hello Unknown
          echo all good Unknown
